{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nThis site is dedicated to the documentation of the recipes brought by\n\nSmartSDK\n to launch, test and experiment different\n\nFIWARE Generic Enablers\n.\n\n\nRequirements\n\n\nIn order to use these recipes you need to have \nDocker\n version \n=\n1.12. Docker installation instructions can be found\n\nhere\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "This site is dedicated to the documentation of the recipes brought by SmartSDK  to launch, test and experiment different FIWARE Generic Enablers .", 
            "title": "Welcome"
        }, 
        {
            "location": "/#requirements", 
            "text": "In order to use these recipes you need to have  Docker  version  =\n1.12. Docker installation instructions can be found here .", 
            "title": "Requirements"
        }, 
        {
            "location": "/context-broker/readme/", 
            "text": "Simple Scenario\n\n\nThis simple recipe triggers an \nOrion Context Broker\n instance backed with a \nMongoDB\n instance.\n\n\nAll elements will be running in docker containers, defined in a docker-compose file.\n\n\nHow to use\n\n\n$ cd simple\n\n# Optionally, modify _.env_ file (or even _docker-compose.yml_) according to your needs.\n\n$ docker-compose up -d\n\n\n\nOrion in HA\n\n\nThe goal of this recipe is to allow developers instantiate N replicas of an \nOrion Context Broker\n in a docker swarm cluster.\n\n\nHow to run it locally (no cluster)\n\n\n$ cd ha\n\n# Optionally, modify _.env_ file (or even _docker-compose.yml_) according to your needs.\n\n$ docker-compose up -d\n\n\n\nHow to run in cluster\n\n\nTODO: Turn this into a docker-compose file once the compose-swarm integration is ready.\n\n\nTo simplify, the following instructions will be using a simple docker swarm created with the scripts provided in the swarm folder. But of course, in practice, your swarm deployment will be different, depending on your chosen infrastructure.\n\n\n$ sh ../tools/create-swarm.sh\n\n\n\nNow, from the swarm-master node, create the networks:\n\n\n$ eval $(docker-machine env node-1)\n$ docker network create --driver overlay proxy\n$ docker network create --driver overlay hacb\n\n\n\nNow it's time to create a swarm listener service, which will notify the proxy when new services\nare created/removed so as to dynamically update the proxy configuration.\n\n\n$ docker service create --name swarm-listener \\\n    --network proxy \\\n    --mount \"type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock\" \\\n    -e DF_NOTIF_CREATE_SERVICE_URL=http://proxy:8080/v1/docker-flow-proxy/reconfigure \\\n    -e DF_NOTIF_REMOVE_SERVICE_URL=http://proxy:8080/v1/docker-flow-proxy/remove \\\n    --constraint 'node.role==manager' \\\n    vfarcic/docker-flow-swarm-listener\n\n\n\nNote that services might take some time until fully deployed. So, please wait until all the requested replicas are ready before creating new services. This can be done running:\n\n\n$ docker service ls\n\n\n\nNow create the proxy service.\n\n\n$ docker service create --name proxy \\\n    -p 80:80 \\\n    -p 443:443 \\\n    -p 1026:1026 \\\n    --network proxy \\\n    -e MODE=swarm \\\n    -e LISTENER_ADDRESS=swarm-listener \\\n    vfarcic/docker-flow-proxy\n\n\n\nThen the database (be patient until it's ready).\n\n\n$ docker service create --name mongo --network hacb mongo:3.2 --nojournal\n\n\n\nAnd finally Orion, linking to mongo as usual.\n\n\n$ docker service create --name orion \\\n--network hacb \\\n--network proxy \\\n--label com.df.notify=true \\\n--label com.df.distribute=true \\\n--label com.df.servicePath=/version \\\n--label com.df.port=1026 \\\nfiware/orion -dbhost mongo\n\n\n\nNow let's query Orion from the proxy to check it's up and running:\n\n\n$ curl -i $(docker-machine ip node-1):1026/version\n\n\n\nDB in replica-set\n\n\nThis recipe aims to allow developers to instantiate an \nOrion Context Broker\n instance backed with a \nreplica set\n of MongoDB instances.\n\n\nAll elements will be running in docker containers, defined in a docker-compose file.\n\n\n\n\nThe recipe's configuration as of now is more suitable for a \ndevelopment environment\n. It has some default values which you might be able to edit with ease.\n\n\nThe replicas will all be launched in the local environment, but nothing prohibits deploying replicas in different hosts, in fact, that would be more likely in a production deployment scenario.\n\n\nIf you are planning to use it in a \nproduction environment\n, further considerations need to be taken into account as show in the corresponding section.\n\n\nHow to use\n\n\n$ cd replica\n\n# Optionally, modify _.env_ file (or even _docker-compose.yml_) according to your needs.\n\n$ docker-compose up -d\n\n\n\nAllow some time until things get connected before querying for content.\n\n\nHow it works\n\n\nThe way this work is pretty straightforward. To begin with, there are three mongo containers\nthat will be triggered (mongo1, mongo2, mongo3).\n\n\nA fourth container (mongosetup) will wait for \nmongo1\n to be ready and then execute the \nsetup_replica.sh\n script to configure the replica set with the 3 mongo instances.\n\n\nThe fifth and last container will host Orion, who will be linked to the \nmongo1\n container as its backend once its ready. It will execute \nsetup_orion.sh\n to start Orion in the replicaset mode with enough timeout for the actual replica to be ready.\n\n\n\n\nYou can experiment different configurations, including timeouts, by editing the file \n.env\n before calling docker-compose.\n\n\nTroubleshooting\n\n\n\n\nIf Orion fails to connect to the database try to restart it.\n$ docker restart orion\n\n\n\n\n\n\n\nImportant considerations\n\n\n\n\nAll nodes must be in the same network, in other words, reachable among them.\n\n\nIf you are running behind a firewall, make sure to keep traffic open for TCP at ports 1026 (Orion's default) and 27017 (Mongo's default)", 
            "title": "Orion"
        }, 
        {
            "location": "/context-broker/readme/#simple-scenario", 
            "text": "This simple recipe triggers an  Orion Context Broker  instance backed with a  MongoDB  instance.  All elements will be running in docker containers, defined in a docker-compose file.", 
            "title": "Simple Scenario"
        }, 
        {
            "location": "/context-broker/readme/#how-to-use", 
            "text": "$ cd simple\n\n# Optionally, modify _.env_ file (or even _docker-compose.yml_) according to your needs.\n\n$ docker-compose up -d", 
            "title": "How to use"
        }, 
        {
            "location": "/context-broker/readme/#orion-in-ha", 
            "text": "The goal of this recipe is to allow developers instantiate N replicas of an  Orion Context Broker  in a docker swarm cluster.", 
            "title": "Orion in HA"
        }, 
        {
            "location": "/context-broker/readme/#how-to-run-it-locally-no-cluster", 
            "text": "$ cd ha\n\n# Optionally, modify _.env_ file (or even _docker-compose.yml_) according to your needs.\n\n$ docker-compose up -d", 
            "title": "How to run it locally (no cluster)"
        }, 
        {
            "location": "/context-broker/readme/#how-to-run-in-cluster", 
            "text": "", 
            "title": "How to run in cluster"
        }, 
        {
            "location": "/context-broker/readme/#todo-turn-this-into-a-docker-compose-file-once-the-compose-swarm-integration-is-ready", 
            "text": "To simplify, the following instructions will be using a simple docker swarm created with the scripts provided in the swarm folder. But of course, in practice, your swarm deployment will be different, depending on your chosen infrastructure.  $ sh ../tools/create-swarm.sh  Now, from the swarm-master node, create the networks:  $ eval $(docker-machine env node-1)\n$ docker network create --driver overlay proxy\n$ docker network create --driver overlay hacb  Now it's time to create a swarm listener service, which will notify the proxy when new services\nare created/removed so as to dynamically update the proxy configuration.  $ docker service create --name swarm-listener \\\n    --network proxy \\\n    --mount \"type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock\" \\\n    -e DF_NOTIF_CREATE_SERVICE_URL=http://proxy:8080/v1/docker-flow-proxy/reconfigure \\\n    -e DF_NOTIF_REMOVE_SERVICE_URL=http://proxy:8080/v1/docker-flow-proxy/remove \\\n    --constraint 'node.role==manager' \\\n    vfarcic/docker-flow-swarm-listener  Note that services might take some time until fully deployed. So, please wait until all the requested replicas are ready before creating new services. This can be done running:  $ docker service ls  Now create the proxy service.  $ docker service create --name proxy \\\n    -p 80:80 \\\n    -p 443:443 \\\n    -p 1026:1026 \\\n    --network proxy \\\n    -e MODE=swarm \\\n    -e LISTENER_ADDRESS=swarm-listener \\\n    vfarcic/docker-flow-proxy  Then the database (be patient until it's ready).  $ docker service create --name mongo --network hacb mongo:3.2 --nojournal  And finally Orion, linking to mongo as usual.  $ docker service create --name orion \\\n--network hacb \\\n--network proxy \\\n--label com.df.notify=true \\\n--label com.df.distribute=true \\\n--label com.df.servicePath=/version \\\n--label com.df.port=1026 \\\nfiware/orion -dbhost mongo  Now let's query Orion from the proxy to check it's up and running:  $ curl -i $(docker-machine ip node-1):1026/version", 
            "title": "TODO: Turn this into a docker-compose file once the compose-swarm integration is ready."
        }, 
        {
            "location": "/context-broker/readme/#db-in-replica-set", 
            "text": "This recipe aims to allow developers to instantiate an  Orion Context Broker  instance backed with a  replica set  of MongoDB instances.  All elements will be running in docker containers, defined in a docker-compose file.   The recipe's configuration as of now is more suitable for a  development environment . It has some default values which you might be able to edit with ease.  The replicas will all be launched in the local environment, but nothing prohibits deploying replicas in different hosts, in fact, that would be more likely in a production deployment scenario.  If you are planning to use it in a  production environment , further considerations need to be taken into account as show in the corresponding section.", 
            "title": "DB in replica-set"
        }, 
        {
            "location": "/context-broker/readme/#how-to-use_1", 
            "text": "$ cd replica\n\n# Optionally, modify _.env_ file (or even _docker-compose.yml_) according to your needs.\n\n$ docker-compose up -d  Allow some time until things get connected before querying for content.", 
            "title": "How to use"
        }, 
        {
            "location": "/context-broker/readme/#how-it-works", 
            "text": "The way this work is pretty straightforward. To begin with, there are three mongo containers\nthat will be triggered (mongo1, mongo2, mongo3).  A fourth container (mongosetup) will wait for  mongo1  to be ready and then execute the  setup_replica.sh  script to configure the replica set with the 3 mongo instances.  The fifth and last container will host Orion, who will be linked to the  mongo1  container as its backend once its ready. It will execute  setup_orion.sh  to start Orion in the replicaset mode with enough timeout for the actual replica to be ready.   You can experiment different configurations, including timeouts, by editing the file  .env  before calling docker-compose.", 
            "title": "How it works"
        }, 
        {
            "location": "/context-broker/readme/#troubleshooting", 
            "text": "If Orion fails to connect to the database try to restart it. $ docker restart orion", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/context-broker/readme/#important-considerations", 
            "text": "All nodes must be in the same network, in other words, reachable among them.  If you are running behind a firewall, make sure to keep traffic open for TCP at ports 1026 (Orion's default) and 27017 (Mongo's default)", 
            "title": "Important considerations"
        }, 
        {
            "location": "/tools/readme/", 
            "text": "Tools\n\n\nThis section contains useful (and sometimes temporary) scripts as well as references.\n\n\nFor Docs\n\n\n\n\ndiagramr\n: To create diagrams from docker-compose.yml.\n\n\n\n\nFor Env\n\n\n\n\nwait-for-it\n: To wait for a service.\n\n\ncreate-swarm.sh\n: To launch a simple Docker Swarm\n\n\nremove-swarm.sh\n: To remove the Swarm.", 
            "title": "Tools"
        }, 
        {
            "location": "/tools/readme/#tools", 
            "text": "This section contains useful (and sometimes temporary) scripts as well as references.", 
            "title": "Tools"
        }, 
        {
            "location": "/tools/readme/#for-docs", 
            "text": "diagramr : To create diagrams from docker-compose.yml.", 
            "title": "For Docs"
        }, 
        {
            "location": "/tools/readme/#for-env", 
            "text": "wait-for-it : To wait for a service.  create-swarm.sh : To launch a simple Docker Swarm  remove-swarm.sh : To remove the Swarm.", 
            "title": "For Env"
        }
    ]
}