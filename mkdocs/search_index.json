{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nThis site is dedicated to the documentation of the recipes brought by\n\nSmartSDK\n to launch, test and experiment different\n\nFIWARE Generic Enablers\n and combinations of them, usually defined as common use cases.\n\n\nRecipes will be based on \nDocker\n, \ndocker-compose\n and maybe some complementary scripts. For simple cases, they will be aimed to run on a single Docker host. For more complex scenarios, they will be aimed to run in a \nDocker Swarm\n.\n\n\nRequirements\n\n\n\n\nDocker\n version \n= 1.13. Installation instructions \nhere", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "This site is dedicated to the documentation of the recipes brought by SmartSDK  to launch, test and experiment different FIWARE Generic Enablers  and combinations of them, usually defined as common use cases.  Recipes will be based on  Docker ,  docker-compose  and maybe some complementary scripts. For simple cases, they will be aimed to run on a single Docker host. For more complex scenarios, they will be aimed to run in a  Docker Swarm .", 
            "title": "Welcome"
        }, 
        {
            "location": "/#requirements", 
            "text": "Docker  version  = 1.13. Installation instructions  here", 
            "title": "Requirements"
        }, 
        {
            "location": "/context-broker/simple/readme/", 
            "text": "Simple Scenario\n\n\nIntroduction\n\n\nThis simple recipe triggers an \nOrion Context Broker\n instance backed with a \nMongoDB\n instance.\n\n\nBoth services will be running in docker containers, defined in the \nsimple/docker-compose.yml\n file.\n\n\nData will be persisted, by default, in a local folder called data. However, this can changed by editing the value of \nDATA_PATH\n variable in the \n.env\n file.\n\n\n\n\nHow to use\n\n\nOptionally, you can modify \n.env\n file (or even \ndocker-compose.yml\n) according to your needs. Then simply run:\n\n\n$ docker-compose up -d\n\n\n\nHow to validate\n\n\nSimply run the following command:\n\n\n$ curl localhost:1026/version\n\n\n\nIt should return something like:\n\n\n{\n\"orion\" : {\n  \"version\" : \"1.6.0-next\",\n  \"uptime\" : \"0 d, 0 h, 5 m, 24 s\",\n  \"git_hash\" : \"61be6c26c59469621a664d7aeb1490d6363cad38\",\n  \"compile_time\" : \"Tue Jan 24 10:52:30 UTC 2017\",\n  \"compiled_by\" : \"root\",\n  \"compiled_in\" : \"b99744612d0b\"\n}\n}", 
            "title": "Simple"
        }, 
        {
            "location": "/context-broker/simple/readme/#simple-scenario", 
            "text": "", 
            "title": "Simple Scenario"
        }, 
        {
            "location": "/context-broker/simple/readme/#introduction", 
            "text": "This simple recipe triggers an  Orion Context Broker  instance backed with a  MongoDB  instance.  Both services will be running in docker containers, defined in the  simple/docker-compose.yml  file.  Data will be persisted, by default, in a local folder called data. However, this can changed by editing the value of  DATA_PATH  variable in the  .env  file.", 
            "title": "Introduction"
        }, 
        {
            "location": "/context-broker/simple/readme/#how-to-use", 
            "text": "Optionally, you can modify  .env  file (or even  docker-compose.yml ) according to your needs. Then simply run:  $ docker-compose up -d", 
            "title": "How to use"
        }, 
        {
            "location": "/context-broker/simple/readme/#how-to-validate", 
            "text": "Simply run the following command:  $ curl localhost:1026/version  It should return something like:  {\n\"orion\" : {\n  \"version\" : \"1.6.0-next\",\n  \"uptime\" : \"0 d, 0 h, 5 m, 24 s\",\n  \"git_hash\" : \"61be6c26c59469621a664d7aeb1490d6363cad38\",\n  \"compile_time\" : \"Tue Jan 24 10:52:30 UTC 2017\",\n  \"compiled_by\" : \"root\",\n  \"compiled_in\" : \"b99744612d0b\"\n}\n}", 
            "title": "How to validate"
        }, 
        {
            "location": "/context-broker/ha/readme/", 
            "text": "Orion in HA\n\n\nThe goal of this recipe is to allow developers instantiate N replicas of an \nOrion Context Broker\n in a docker swarm cluster.\n\n\n\n\nHow to run it\n\n\nFirst you need to have a Docker Swarm already setup. Checkout the \ntools\n section for a quick alternative for local tests.\n\n\nThen you can optionally adjust \ndocker-compose.yml\n file according to your needs. If you do so, checkout the \ndocker-compose documentation\n to avoid conflicting options (e.g, giving container name to orion and then trying to scale it).\n\n\nFinally, run:\n\n\n$ docker stack deploy --compose-file=docker-compose.yml context-broker\n\n\n\nHow to validate it\n\n\nNote that services might take some time until fully deployed. So, please wait until all the requested replicas are ready before creating new services. This can be done running:\n\n\n$ docker service ls\n\n\n\nYou can check the distribution of your containers among the swarm node running:\n\n\n$ docker service ps context-broker_orion\n\n\n\nNow let's query Orion to check it's up and running:\n\n\n$ curl -i $(docker-machine ip ms-manager0):1026/version\n\n\n\nThanks to the docker swarm internal meshing you can actually perform the previous query to any node of the swarm, it will be redirected to a node where the request on port 1026 can be attended (any node running Orion).", 
            "title": "HA"
        }, 
        {
            "location": "/context-broker/ha/readme/#orion-in-ha", 
            "text": "The goal of this recipe is to allow developers instantiate N replicas of an  Orion Context Broker  in a docker swarm cluster.", 
            "title": "Orion in HA"
        }, 
        {
            "location": "/context-broker/ha/readme/#how-to-run-it", 
            "text": "First you need to have a Docker Swarm already setup. Checkout the  tools  section for a quick alternative for local tests.  Then you can optionally adjust  docker-compose.yml  file according to your needs. If you do so, checkout the  docker-compose documentation  to avoid conflicting options (e.g, giving container name to orion and then trying to scale it).  Finally, run:  $ docker stack deploy --compose-file=docker-compose.yml context-broker", 
            "title": "How to run it"
        }, 
        {
            "location": "/context-broker/ha/readme/#how-to-validate-it", 
            "text": "Note that services might take some time until fully deployed. So, please wait until all the requested replicas are ready before creating new services. This can be done running:  $ docker service ls  You can check the distribution of your containers among the swarm node running:  $ docker service ps context-broker_orion  Now let's query Orion to check it's up and running:  $ curl -i $(docker-machine ip ms-manager0):1026/version  Thanks to the docker swarm internal meshing you can actually perform the previous query to any node of the swarm, it will be redirected to a node where the request on port 1026 can be attended (any node running Orion).", 
            "title": "How to validate it"
        }, 
        {
            "location": "/context-broker/replica/readme/", 
            "text": "Orion with DB in replica-set\n\n\nThis recipe offers an \nOrion Context Broker\n instance backed with a \nreplica set\n of MongoDB instances.\n\n\nAll elements will be running in docker containers, defined in docker-compose files.\n\n\nIt reuses the \nmongodb replica recipe\n.\n\n\n\n\nThe recipe's configuration as of now is more suitable for a \ndevelopment environment\n. It has some default values which you might be able to edit with ease.\n\n\nHow to use\n\n\nFirst run the \nmongodb replica recipe\n. Then...\n\n\n# Optionally, modify _docker-compose.yml_ according to your needs.\n\n$ docker-compose up -d\n\n\n\nAllow some time until things get connected before querying for content.\n\n\nHow it works\n\n\nFor the MongoDB replicaset part refer to \nHow it works\n of the MongoDB replicaset recipe.\n\n\nThen, with enough timeout for the actual replica to be ready, a container is launched using the script \nsetup_orion.sh\n as entrypoint to start Orion in the \nreplicaset\n mode.\n\n\n\n\nImportant considerations\n\n\n\n\nAll containers must be in the same network, in other words, reachable among them.\n\n\nIf you are running containers behind a firewall, make sure to keep traffic open for TCP at ports 1026 (Orion's default) and 27017 (Mongo's default)\n\n\n\n\nTroubleshooting\n\n\n\n\nIf Orion fails to connect to the database, try to restart it.\n $ docker restart orion", 
            "title": "Replica Set"
        }, 
        {
            "location": "/context-broker/replica/readme/#orion-with-db-in-replica-set", 
            "text": "This recipe offers an  Orion Context Broker  instance backed with a  replica set  of MongoDB instances.  All elements will be running in docker containers, defined in docker-compose files.  It reuses the  mongodb replica recipe .   The recipe's configuration as of now is more suitable for a  development environment . It has some default values which you might be able to edit with ease.", 
            "title": "Orion with DB in replica-set"
        }, 
        {
            "location": "/context-broker/replica/readme/#how-to-use", 
            "text": "First run the  mongodb replica recipe . Then...  # Optionally, modify _docker-compose.yml_ according to your needs.\n\n$ docker-compose up -d  Allow some time until things get connected before querying for content.", 
            "title": "How to use"
        }, 
        {
            "location": "/context-broker/replica/readme/#how-it-works", 
            "text": "For the MongoDB replicaset part refer to  How it works  of the MongoDB replicaset recipe.  Then, with enough timeout for the actual replica to be ready, a container is launched using the script  setup_orion.sh  as entrypoint to start Orion in the  replicaset  mode.", 
            "title": "How it works"
        }, 
        {
            "location": "/context-broker/replica/readme/#important-considerations", 
            "text": "All containers must be in the same network, in other words, reachable among them.  If you are running containers behind a firewall, make sure to keep traffic open for TCP at ports 1026 (Orion's default) and 27017 (Mongo's default)", 
            "title": "Important considerations"
        }, 
        {
            "location": "/context-broker/replica/readme/#troubleshooting", 
            "text": "If Orion fails to connect to the database, try to restart it.  $ docker restart orion", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/mongodb/replica/readme/", 
            "text": "MongoDB replica-set\n\n\nThis recipe will automate the creation of a \nreplica set\n of 3 MongoDB instances.\n\n\nIt was written for a single docker host for testing purposes. Of course, in production you don't want all the replica-set instances running in the same host.\n\n\nHow to use\n\n\n# Optionally, modify _.env_ file according to your needs.\n\n$ docker-compose up -d\n\n\n\nHow it works\n\n\nThere are three mongo deamons that will be triggered in their containers (mongo1, mongo2, mongo3).\n\n\nA fourth container (mongosetup) will wait for \nmongo1\n to be ready and then execute the \nsetup_replica.sh\n script to configure the replica set with the 3 mongo instances.\n\n\nFor testing purposes, each mongo instance has its data mapped to a local directory, but this is not a strong requirement.\n\n\nFurther improvements\n\n\n\n\nProvide a more dynamic way to scale this recipe to N nodes.\n\n\nPrepare this recipe to run in a Docker Swarm.", 
            "title": "Replica Set"
        }, 
        {
            "location": "/mongodb/replica/readme/#mongodb-replica-set", 
            "text": "This recipe will automate the creation of a  replica set  of 3 MongoDB instances.  It was written for a single docker host for testing purposes. Of course, in production you don't want all the replica-set instances running in the same host.", 
            "title": "MongoDB replica-set"
        }, 
        {
            "location": "/mongodb/replica/readme/#how-to-use", 
            "text": "# Optionally, modify _.env_ file according to your needs.\n\n$ docker-compose up -d", 
            "title": "How to use"
        }, 
        {
            "location": "/mongodb/replica/readme/#how-it-works", 
            "text": "There are three mongo deamons that will be triggered in their containers (mongo1, mongo2, mongo3).  A fourth container (mongosetup) will wait for  mongo1  to be ready and then execute the  setup_replica.sh  script to configure the replica set with the 3 mongo instances.  For testing purposes, each mongo instance has its data mapped to a local directory, but this is not a strong requirement.", 
            "title": "How it works"
        }, 
        {
            "location": "/mongodb/replica/readme/#further-improvements", 
            "text": "Provide a more dynamic way to scale this recipe to N nodes.  Prepare this recipe to run in a Docker Swarm.", 
            "title": "Further improvements"
        }, 
        {
            "location": "/tools/readme/", 
            "text": "Tools\n\n\nThis section contains useful (and sometimes temporary) scripts as well as references to tools, projects and pieces of documentation used for the development of the recipes.\n\n\nFor Env\n\n\n\n\nminiswarm\n: To manage a local Docker Swarm for testing purposes.\n\n\nwait-for-it\n: To wait for a service. Note: It might no longer be needed with the introduction of the \"healthcheck\" feature in docker-compose.\n\n\n\n\nFor Docs\n\n\n\n\n\n\ngravizo\n: To create diagrams for documenting recipes.\nAll recipes should have an introduction with a high-level overview of what the recipe is used for. We use this tool to create such diagrams.\n\n\n\n\n\n\ndiagramr\n: To give more docker-related details we use this tool to create diagrams from docker-compose files. The tools gives also the .dot file, which is eventually customized and then turned into a png file using \ngraphviz\n.\n\n\n$ dot compose.dot -Tpng -o compose.png\n\n\n\n\n\n\n\ndraw.io\n: Being evaluated as alternative/replacement of the previous two.\n\n\n\n\n\n\ncolor names\n: The reference for color names used in .dot files.", 
            "title": "Tools"
        }, 
        {
            "location": "/tools/readme/#tools", 
            "text": "This section contains useful (and sometimes temporary) scripts as well as references to tools, projects and pieces of documentation used for the development of the recipes.", 
            "title": "Tools"
        }, 
        {
            "location": "/tools/readme/#for-env", 
            "text": "miniswarm : To manage a local Docker Swarm for testing purposes.  wait-for-it : To wait for a service. Note: It might no longer be needed with the introduction of the \"healthcheck\" feature in docker-compose.", 
            "title": "For Env"
        }, 
        {
            "location": "/tools/readme/#for-docs", 
            "text": "gravizo : To create diagrams for documenting recipes.\nAll recipes should have an introduction with a high-level overview of what the recipe is used for. We use this tool to create such diagrams.    diagramr : To give more docker-related details we use this tool to create diagrams from docker-compose files. The tools gives also the .dot file, which is eventually customized and then turned into a png file using  graphviz .  $ dot compose.dot -Tpng -o compose.png    draw.io : Being evaluated as alternative/replacement of the previous two.    color names : The reference for color names used in .dot files.", 
            "title": "For Docs"
        }
    ]
}